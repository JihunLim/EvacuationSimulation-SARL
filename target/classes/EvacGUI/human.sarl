/** 
 * 
 */
package EvacGUI

import EvacGUI.Behaviors.A_Escape
import EvacGUI.Behaviors.Escape
import EvacGUI.Behaviors.EscapeSkills
import EvacGUI.Behaviors.Fire
import EvacGUI.Behaviors.Move
import EvacGUI.Behaviors.MoveSkills
import EvacGUI.Behaviors.SimulStart
import EvacGUI.Behaviors.YMBehavior
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.util.Scopes

agent human_child_male {
	uses Logging, InnerContextAccess, Behaviors, Lifecycle, Schedules, Behaviors, DefaultContextInteractions

	var life : int = 100
	var strength : int = 30
	var age : int
	var sex : String // male or female
	var emotion : int
	var agent_id : int
	var currentX : float
	var currentY : float
	var evacuated : int

	// var evacuated : int
	// var test1 = new test()
	on SimulStart [occurrence.mode == 1] {
		// start when mode is 1
		// println("mode is " + occurrence.mode)
		println("agent which is " + this.ID + " is spawned!")
		// set initialize the variables
		synchronized (this) {
			agent_id = state.agent_number
			state.agent_number++
		}
		// var state = new state()
		state.calcMinDirection(agent_id)
		// state.change_direction(agent_id, 800, 500)
		println(agent_id)

		// implements the skills & capacity!
		setSkill(new MoveSkills, Move)
		setSkill(new EscapeSkills, Escape)
		// setSkill(new Watch, See)
		// set the behavior
		var beh = new YMBehavior(this)
		registerBehavior(beh)

		if (agent_id == 0) {
			emit(new Fire, null)
		}

		state.calcMinDirection(agent_id)
		val directTask = task("wait-task")

		var state = new state()
		val waitTask = task("wait-task")
		evacuated = 1

		waitTask.every(10) [
			synchronized (this) {
				evacuated = state.collisionAvoid(agent_id)
				state.reCalcDirection(agent_id)
				if (evacuated == 0) {
					println(agent_id + "evacuated with push amount " + state.getPushAmount(agent_id))
					killMe
				}
			}

		]

	}

	on Initialize {
		life = 100

	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
		var superScope = Scopes.addresses(defaultSpace.getAddress(defaultContext.ID))
		emit(new A_Escape, superScope)
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}
}
/* 
 * agent human_child_female {
 * uses Logging, DefaultContextInteractions

 * var life : int = 80
 * var strength : int = 15
 * var age : int
 * var sex : String // male or female
 * var emotion : int

 * on SimulStart [occurrence.mode == 1] {
 * // start when mode is 1
 * println("mode is " + occurrence.mode)
 * println("agent which is " + this.ID + " is spawned!")
 * // initialize agent
 * }
 * }
 * /
 */
