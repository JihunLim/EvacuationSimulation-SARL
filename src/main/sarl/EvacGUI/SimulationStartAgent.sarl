/** 
 * 
 */
package EvacGUI

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules

import static EvacGUI.base_frame.*

/** 
 * @author User
 * 
 */
agent SimulationStartAgent {
	uses Logging, InnerContextAccess, Behaviors, Lifecycle, Schedules, Behaviors, DefaultContextInteractions 

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The Simulation is started.")
		
		// Start the GUI in Java
		var start = new base_frame()

		val waitTask = task("wait-task")
		waitTask.every(1000) [
			synchronized (this) {
				
					if (base_frame.isSpawnAgent) {
						// Spawn Agent
						// emit(new SpawnAgentEvent, null)
						// set the proportion
//						info("agent num is -> " + base_frame.agent_num)
//						if (base_frame.agent_num > 0) {
//							for (i : 1 .. base_frame.agent_num) { // 1 to 5
//								spawnInContext(typeof(human_child_male), getInnerContext)
//							}
//						}
						// Spawn the Manager agent
						spawnInContext(typeof(Manager), null)

//						if (base_frame.isSpawnAgent == false)	
//							killMe
						
					}

					

				}
			
		]
		
		
		
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The SimulationStartAgent was stopped.")
	}
}
