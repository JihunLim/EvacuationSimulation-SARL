/** 
 * 
 */
package EvacGUI

import EvacGUI.Behaviors.A_Dead
import EvacGUI.Behaviors.A_Escape
import EvacGUI.Behaviors.A_Here
import EvacGUI.Behaviors.SimulStart
import EvacGUI.Behaviors.StopSimul
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules

import static EvacGUI.base_frame.*

agent Manager {
	uses Logging, InnerContextAccess, Behaviors, Lifecycle, Schedules, Behaviors, DefaultContextInteractions

	var isSimulOpened = true
	var hasHuman = false
	var livedManCount : int
	var deadHuman : int = 0
	var escapeHuman : int = 0

	static def SpawnAgent : void {
	}

	on Initialize {
		info("The Manager agent of Evacuation Simulation is initialize!")
		var start = new base_frame()
		val waitTask = task("wait-task")
		waitTask.every(1000) [
			synchronized (this) {
				if (!isSimulOpened) {
					if (!hasMemberAgent) {
						waitTask.cancel
						killMe
					}
				} else {
					if (base_frame.isSpawnAgent) {
						// Spawn Agent
						// emit(new SpawnAgentEvent, null)
						// set the proportion
						info("agent num is -> " + base_frame.agent_num)
						if (base_frame.agent_num > 0) {
							for (i : 1 .. base_frame.agent_num) { // 1 to 5
								info("aaa")
								spawnInContext(typeof(human_child_male), getInnerContext)
							}
						}
						wake(new SimulStart(1)) // start the evacuation simulation with the mode 1
						base_frame.isSpawnAgent = false
					}

					if (!hasHuman && isButtonClicked) { // there are no people in the building except the dead
						isSimulOpened = false
						// print the information who escaped people or dead people etc.
						println("the number of man who lived from the hell is : " + livedManCount)

						wake(new StopSimul)
					}
					hasHuman = false

				}
			}
		]

	}
	on A_Here [isSimulOpened] {
		synchronized (this) {
			hasHuman = true

		}
	}

	on A_Dead [isSimulOpened] {
		synchronized (this) {
			deadHuman += 1
		}
	}

	on A_Escape [isSimulOpened] {
		synchronized (this) {
			escapeHuman += 1
		}
	}
}
